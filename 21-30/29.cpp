/*
 * Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * 
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * 
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 */

#include <iostream>
#include <set>

#include <boost/timer/timer.hpp>
#include <boost/multiprecision/cpp_int.hpp>

using boost::timer::auto_cpu_timer;
using boost::multiprecision::cpp_int;

cpp_int pow(const int a, const int b) {
    cpp_int result(a);
    for (int i{ 0 }; i < b - 1; ++i) {
        result *= a;
    }
    return result;
}

std::uint32_t unique_combinations(const int a_start, const int a_end, const int b_start, const int b_end) {

    std::set<cpp_int> items;

    for (auto a{ a_start }; a <= a_end; ++a) {
        for (auto b{ b_start }; b <= b_end; ++b) {
            const cpp_int result{ pow(a, b) };
            items.insert(result);
        }
    }

    return items.size();
}

int main() {
    auto_cpu_timer t;    
    std::cout << unique_combinations(2, 100, 2, 100) << '\n';
}