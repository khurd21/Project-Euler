/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <climits>
#include <limits>
#include <cmath>
#include <chrono>

#define uint unsigned int 
#define DIV_2(val) val >> 1
#define THRESHOLD 500


uint nth_triangle_number(const uint n) {
    return DIV_2(n * (n + 1));
}

uint num_divisors(const uint n) {

    uint ans{};
    double end{sqrt(n)};

    for (uint i=1; i <= (uint)std::floor(end); ++i) {
        if (n % i == 0) {
            ans += (n == i) ? 1 : 2;
        }
    }
    return ans;
}

int main() {

    std::chrono::steady_clock::time_point begin{std::chrono::steady_clock::now()};

    uint first_divisor{std::numeric_limits<uint>::min()};
    for (uint i=1; i < UINT_MAX; ++i) {
        const uint triangle_num{nth_triangle_number(i)};
        first_divisor = num_divisors(triangle_num);
        if (first_divisor > THRESHOLD) {
            std::cout << "First divisor: " << first_divisor << " Triangle Num: " << triangle_num << '\n';
        }
    }

    std::chrono::steady_clock::time_point end{std::chrono::steady_clock::now()};

    std::cout << "Time: " << std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin).count() << '\n';
    return EXIT_SUCCESS;
}